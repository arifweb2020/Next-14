- set up Next
npx create-next-app@latest folder-name

- Routing
based on file system inside app folder if you want to make url or routing ex:http://localhost:3000/about
make one folder like about inside that add page.tsx file

- Link and navigation
for redirect use <Link href="/login">Login </Link>
for button on click import { useRouter } from 'next/navigation';

- We can install express directly in our next js app

npm install express

# or if you prefer using Yarn

yarn add express

In your project directory

// server.js

const express = require('express');
const next = require('next');
const dev = process.env.NODE_ENV !== 'production';
const app = next({ dev });
const handle = app.getRequestHandler();

app.prepare().then(() => {

  const server = express();

  // Define your Express.js routes and API endpoints here

  server.get('/api/example', (req, res) => {

    res.json({ message: 'This is an example API endpoint' });

  });

  server.all('*', (req, res) => {

    return handle(req, res);

  });

  server.listen(3000, (err) => {

    if (err) throw err;

    console.log('> Ready on http://localhost:3000');

  });

});

Package json file

"scripts": {

  "dev": "node server.js",

  "build": "next build",

  "start": "NODE_ENV=production node server.js"

}
npm run dev

- Nested Routing
based on file system inside top level app folder we hv to make one folder if you want to make url or routing ex:http://localhost:3000/about/company-profile
make one folder like about inside that add page.tsx file

-common layout in layout.tsx
for ex: navbar

- Conditional layout
follow - login folder

- Dynamic routing
based on id or name 
follow - user-list folder


- catch all segement of router
we can add many segement in url ex: http://localhost:3000/tutorial/science/chemistry
follow - tutorial folder 

- 404 page not found
name same shud me specific - not-found.tsx

- middleware
is a part of routing
create a middleware in a root directory with the name middleware.ts

- server component data fetching
follow product folder

- css module
if you are making css module it should must .module name convention ex: custom.module.css

- image optimaztion
using Image component
and if you want to add image from different url
go next.config.js

const nextConfig = {
  images:{
    domains:['url']
  }
}

- font optimaztion
import {Roboto} from 'next/font/google'
const mystyle = Roboto({
  weight:'100',
  subsets:['latin'],
  display:'swap'
  })

  <p className={mystyle.className}>font optimaztion</P>

  - generate dynamic metadata for seo
  follow user-list folder
   generateMetadata name shd be same
  export const generateMetadata = ()=>{
return{
  title:"user page list",
  description:"user data list for mba"
}
}

- script component (some time we dont hv npm Package so we hv to use cdn)
we load particular library in specific component
follow - service folder and geolocation.ts file

- loader
follow product folder
you will get loading.tsx file name shd be same always we implemnted in server component

- static assets
when we buil and project on that time yr file name folder structure will change and code is minified
but in static file when we make production build it remains unchange
we can put basic cnofig file like ex:sitemap, favicon
the file we can use globaly ex:css,js file
and put inside public folder

- how to make production build
build - to execute our code in browser

- export static html page
create static-folder
go to next-config.js file and add this key  output:"export"

const nextConfig = {
    output:"export"
}

then run command - npm run build
then you will get out folder

- static site generation
at the time of buid yr js code convert into html 
follow ssg folder

first stop server then run npm run build
once build is finish go .next > server > app folder there you will 

- ssr 
when we call req the on server side itself js convert into html in each request

- Redirection
way one

go to particular page which u want to redirect
import {redirect} from 'nxt/navigation'
const Login = () => {
  redirect('/about')
  return (
    <div>This Navbar will appear only in Login page</div>
  )
}

way two

go to next.config.js file
const nextConfig = {
  redirects: async = ()=>{
    return [
      {
        source:'/about',
        destination:'/',
        permanent:false
      }
      ,
      {
        source:'/about/:id', // for dynamic page redirection
        destination:'/',
        permanent:false
      }
    ]
  }
}

- env variable
by default process.env.NODE_ENV 

you acn make your own variable also
create one file name with .env after that you can make name like this .env.local also

DB_PASS="dewdwe"
for access process.env.DB_PASS

for prod and dev url
make one folder with config under that make one file constant.ts file

export const API_BASE_URL = process.env.NODE_ENV == "development" ? "www.api.dev.com" : "www.api.prod.com"

- API routes
write server code like node , db connection
follow api folder

- Fetch data from API routes
follow api folder
follow crud folder for fetch data from API routes

- Static db 
follow utils folder inside db files

- filter single data from API in routes
follow api > users > [id] folder

- fetch single data of user from api user routes
follow crud folder

- Make Api with post method
follow api>users>route folder
follow crud>add-user folder post api integration